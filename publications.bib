@inproceedings{MTMT:32836583,
	title = {C for Yourself: Comparison of Front-End Techniques for Formal Verification},
	author = {Bajczi, Levente and Ádám, Zsófia and Molnár, Vince},
	booktitle = {2022 IEEE/ACM 10th International Conference on Formal Methods in Software Engineering (FormaliSE)},
	doi = {10.1145/3524482.3527646},
	unique-id = {32836583},
	year = {2022},
	orcid-numbers = {Bajczi, Levente/0000-0002-6551-5860; Ádám, Zsófia/0000-0003-2354-1750; Molnár, Vince/0000-0002-8204-7595},
	abstract = {With the improvement of hardware and algorithms, the main challenge of software model checking has shifted from pure algorithmic performance toward supporting a wider set of input programs. Successful toolchains tackle the problem of parsing a wide range of inputs in an efficient way by reusing solutions from existing compiler technologies such as Eclipse CDT or LLVM. Our experience suggests that well-established techniques in compiler technology are not necessarily beneficial to model checkers and sometimes can even hurt their performance. In this paper, we review the tools mature enough to participate in the Software Verification Competition in terms of the employed analysis and frontend techniques. We find that successful tools do exhibit a bias toward certain combinations. We explore the theoretical reasons and suggest an adaptable approach for model checking frameworks. We validate our recommendations by implementing a new frontend for a model checking framework and show that it indeed benefits some of the algorithms.},

    url_pdf    = {https://leventebajczi.github.io/publications/formalise22.pdf},
    url_slides = {https://leventebajczi.github.io/publications/slides/formalise22.pdf},
	url_mtmt = {https://m2.mtmt.hu/api/publication/32836583},
}

@article{MTMT:30865515,
	title = {Will My Program Break on This Faulty Processor?. Formal Analysis of Hardware Fault Activations in Concurrent Embedded Software},
	author = {Bajczi, Levente and Vörös, András and Molnár, Vince},
	doi = {10.1145/3358238},
	journal-iso = {ACM T EMBED COMPUT S},
	journal = {ACM TRANSACTIONS ON EMBEDDED COMPUTING SYSTEMS},
	volume = {18},
	unique-id = {30865515},
	issn = {1539-9087},
	abstract = {Formal verification is approaching a point where it will be reliably applicable to embedded software. Even though formal verification can efficiently analyze multi-threaded applications, multi-core processors are often considered too dangerous to use in critical systems, despite the many benefits they can offer. One reason is the advanced memory consistency model of such CPUs. Nowadays, most software verifiers assume strict sequential consistency, which is also the naïve view of programmers. Modern multi-core processors, however, rarely guarantee this assumption by default. In addition, complex processor architectures may easily contain design faults. Thanks to the recent advances in hardware verification, these faults are increasingly visible and can be detected even in existing processors, giving an opportunity to compensate for the problem in software. In this paper, we propose a generic approach to consider inconsistent behavior of the hardware in the analysis of software. Our approach is based on formal methods and can be used to detect the activation of existing hardware faults on the application level and facilitate their mitigation in software. The approach relies heavily on recent results of model checking and hardware verification and offers new, integrative research directions. We propose a partial solution based on existing model checking tools to demonstrate feasibility and evaluate their performance in this context.},
	year = {2019},
	eissn = {1558-3465},
	orcid-numbers = {Bajczi, Levente/0000-0002-6551-5860; Molnár, Vince/0000-0002-8204-7595},

    url_pdf    = {https://leventebajczi.github.io/publications/emsoft19.pdf},
    %url_slides = {https://leventebajczi.github.io/publications/slides/emsoft19.pdf},
	url_mtmt = {https://m2.mtmt.hu/api/publication/30865515},	
}

@article{MTMT:32801008,
	title = {Theta: portfolio of CEGAR-based analyses with dynamic algorithm selection (Competition Contribution)},
	author = {Ádám, Zsófia and Bajczi, Levente and Dobos-Kovács, Mihály and Hajdu, Ákos and Molnár, Vince},
	doi = {10.1007/978-3-030-99527-0_34},
	journal-iso = {LECT NOTES COMPUT SC},
	journal = {LECTURE NOTES IN COMPUTER SCIENCE},
	volume = {13244},
	unique-id = {32801008},
	issn = {0302-9743},
	keywords = {Computer Science, Software Engineering},
	year = {2022},
	eissn = {1611-3349},
	pages = {474-478},
	orcid-numbers = {Ádám, Zsófia/0000-0003-2354-1750; Bajczi, Levente/0000-0002-6551-5860; Dobos-Kovács, Mihály/0000-0002-0064-2965; Hajdu, Ákos/0000-0001-8001-8865; Molnár, Vince/0000-0002-8204-7595},
	abstract = {THETA is a model checking framework based on abstraction refinement algorithms. In SV-COMP 2022, we introduce: 1) reasoning at the source-level via a direct translation from C programs; 2) support for concurrent programs with interleaving semantics; 3) mitigation for non-progressing refinement loops; 4) support for SMT-LIB-compliant solvers. We combine all of the aforementioned techniques into a portfolio with dynamic algorithm selection.},

    url_pdf    = {https://leventebajczi.github.io/publications/tacas22.pdf},
    url_slides = {https://leventebajczi.github.io/publications/slides/tacas22.pdf},
    url_poster = {https://leventebajczi.github.io/publications/posters/tacas22.pdf},
	url_mtmt = {https://m2.mtmt.hu/api/publication/32801008},
}